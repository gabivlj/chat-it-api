type User {
  id: ID!
  username: String!
  posts: [Post!]!
  profileImage: Image
}

type Post {
  user: User!
  id: ID!
  image: Image
  chat: [Message!]!
  title: String!
  text: String!
  createdAt: Int!
}

type Message {
  id: ID!
  createdAt: Int!
  text: String!
  user: User!
  post: Post!
}

type Image {
  urlXL: String!
  urlMD: String!
  urlSM: String!
  post: Post
  user: User
}

input Params {
  before: ID
  after: ID
  limit: Int!
}

input UserQuery {
  username: String
  id: ID
}

type Query {
  image(id: ID!): Image!
  imageFromObject(objectID: ID!): Image!
  messagesPost(id: ID!, params: Params): [Message!]!
  post(id: ID!): Post!
  postsUser(id: ID!, params: Params): [Post!]!
  user(id: UserQuery!): User!
  users: [User!]!
  posts(params: Params): [Post!]!
}

input FormLogInRegister {
  username: String!
  password: String!
}

type UserSession {
  user: User!
  session: String!
}

scalar Upload

input PostForm {
  image: Upload
  text: String!
  title: String!
}

type Mutation {
  newUser(parameters: FormLogInRegister): UserSession!
  logUser(parameters: FormLogInRegister): UserSession!
  newProfileImage(image: Upload!): User!
  newPost(form: PostForm!): Post!
  sendMessage(text: String!, postId: ID!, userId: ID!): Message!
}

enum TypeOfMessage {
  CONNECTION
  MESSAGE
  EXIT
}

type Subscription {
  newMessage(postId: ID!): Message!
}

directive @user(id: ID!) on SUBSCRIPTION
