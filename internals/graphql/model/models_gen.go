// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
	"github.com/gabivlj/chat-it/internals/domain"
)

type FormLogInRegister struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Params struct {
	Before *string `json:"before"`
	After  *string `json:"after"`
	Limit  int     `json:"limit"`
}

type PostForm struct {
	Image *graphql.Upload `json:"image"`
	Text  string          `json:"text"`
	Title string          `json:"title"`
}

type UserQuery struct {
	Username *string `json:"username"`
	ID       *string `json:"id"`
}

type UserSession struct {
	User    *domain.User `json:"user"`
	Session string       `json:"session"`
}

type TypeOfMessage string

const (
	TypeOfMessageConnection TypeOfMessage = "CONNECTION"
	TypeOfMessageMessage    TypeOfMessage = "MESSAGE"
	TypeOfMessageExit       TypeOfMessage = "EXIT"
)

var AllTypeOfMessage = []TypeOfMessage{
	TypeOfMessageConnection,
	TypeOfMessageMessage,
	TypeOfMessageExit,
}

func (e TypeOfMessage) IsValid() bool {
	switch e {
	case TypeOfMessageConnection, TypeOfMessageMessage, TypeOfMessageExit:
		return true
	}
	return false
}

func (e TypeOfMessage) String() string {
	return string(e)
}

func (e *TypeOfMessage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TypeOfMessage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TypeOfMessage", str)
	}
	return nil
}

func (e TypeOfMessage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
